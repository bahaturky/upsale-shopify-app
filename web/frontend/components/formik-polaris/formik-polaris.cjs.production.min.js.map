{"version":3,"file":"formik-polaris.cjs.production.min.js","sources":["../src/usePolarisField.ts","../src/Checkbox.tsx","../src/RangeSlider.tsx","../src/Select.tsx","../src/TextField.tsx"],"sourcesContent":["import { useEffect, useCallback, useMemo } from 'react';\nimport { useFormikContext, FieldValidator } from 'formik';\n\nexport interface UsePolarisFieldProps<V = any, T = V> {\n  /**\n   * The field identifier that formik can use to\n   * connect this field to the data. Will also be\n   * used as the polaris id\n   */\n  name: string;\n\n  /**\n   * Optional helper to convert from\n   * non-string values to a string\n   */\n  decode?: (value: V) => T;\n\n  /**\n   * Optional helper to convert from\n   * current string value to non-string value\n   */\n  encode?: (raw: T) => V;\n\n  /**\n   * Pass in a validation function to this field specifically\n   */\n  validate?: FieldValidator;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function usePolarisField<V = any, T = V>(\n  props: UsePolarisFieldProps<V, T>,\n) {\n  const { name, encode, decode, validate } = props;\n\n  // Modified from https://github.com/jaredpalmer/formik/blob/5553720b5d6c9729cb3b12fd7948f28ad3be9adc/src/Field.tsx#L74\n\n  const {\n    registerField,\n    unregisterField,\n    getFieldProps,\n    getFieldMeta,\n    isSubmitting,\n    setFieldError,\n    setFieldValue,\n  } = useFormikContext<any>();\n\n  useEffect(() => {\n    if (name) {\n      registerField(name, { validate });\n    }\n    return () => {\n      if (name) {\n        unregisterField(name);\n      }\n    };\n  }, [name, registerField, unregisterField, validate]);\n\n  const field = getFieldProps<V>({ name });\n  const meta = getFieldMeta<V>(name);\n\n  const value = useMemo(() => (decode ? decode(field.value) : field.value), [\n    decode,\n    field.value,\n  ]);\n\n  const handleFocus = useCallback(() => {\n    setFieldError(name, '');\n  }, [name, setFieldError]);\n\n  const handleBlur = useCallback(() => {\n    field.onBlur({ target: { name } });\n  }, [field, name]);\n\n  const handleChange = useCallback(\n    (v: T) => {\n      setFieldValue(name, encode ? encode(v) : v);\n    },\n    [encode, name, setFieldValue],\n  );\n\n  const error = useMemo(() => {\n    if (meta.error && meta.touched) {\n      return meta.error;\n    }\n\n    return undefined;\n  }, [meta.error, meta.touched]);\n\n  return useMemo(\n    () => ({\n      ...field,\n      ...meta,\n      handleFocus,\n      handleBlur,\n      handleChange,\n      value,\n      isSubmitting,\n      error,\n    }),\n    [\n      error,\n      field,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      isSubmitting,\n      meta,\n      value,\n    ],\n  );\n}\n","import React from 'react';\nimport {\n  Checkbox as PolarisCheckbox,\n  CheckboxProps as PolarisCheckboxProps,\n} from '@shopify/polaris';\nimport { usePolarisField, UsePolarisFieldProps } from './usePolarisField';\nimport { Omit, OmittedPolarisProps } from './types';\n\ntype Props<V> = UsePolarisFieldProps<V, boolean> & PolarisCheckboxProps;\n\nexport type CheckboxProps<V> = Omit<Props<V>, OmittedPolarisProps>;\n\nfunction CheckboxField<V = any>(props: CheckboxProps<V>) {\n  const { name, encode, decode, validate, ...polarisProps } = props;\n\n  const {\n    value: rawValue,\n    isSubmitting,\n    handleFocus,\n    handleBlur,\n    handleChange,\n    error,\n  } = usePolarisField<V, boolean>({ name, encode, decode, validate });\n\n  const value = rawValue === undefined ? false : rawValue;\n  if (typeof value !== 'boolean') {\n    throw new Error(\n      `[Checkbox] Found value of type \"${typeof value}\" for field \"${name}\". Requires boolean (after decode)`,\n    );\n  }\n\n  return (\n    <PolarisCheckbox\n      id={name}\n      error={error}\n      disabled={isSubmitting}\n      {...polarisProps}\n      checked={value}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onChange={handleChange}\n    />\n  );\n}\n\nexport default CheckboxField;\n","import React from 'react';\nimport {\n  RangeSlider as PolarisRangeSlider,\n  RangeSliderProps as PolarisRangeSliderProps,\n} from '@shopify/polaris';\nimport { usePolarisField, UsePolarisFieldProps } from './usePolarisField';\nimport { Omit, OmittedPolarisProps } from './types';\n\nexport type RangeSliderValue = PolarisRangeSliderProps['value'];\n\ntype Props<V> = UsePolarisFieldProps<V, RangeSliderValue> &\n  PolarisRangeSliderProps;\n\nexport type RangeSliderProps<V = any> = Omit<Props<V>, OmittedPolarisProps>;\n\nfunction RangeSlider<V = any>(props: RangeSliderProps<V>) {\n  const { name, encode, decode, validate, ...polarisProps } = props;\n\n  const {\n    value: rawValue,\n    isSubmitting,\n    handleFocus,\n    handleBlur,\n    handleChange,\n    error,\n  } = usePolarisField<V, RangeSliderValue>({ name, encode, decode, validate });\n\n  const value = rawValue === undefined ? '' : rawValue;\n  if (typeof value !== 'number' && !Array.isArray(value)) {\n    throw new Error(\n      `[RangeSlider] Found value of type \"${typeof value}\" for field \"${name}\". Requires number or [number, number] (after decode)`,\n    );\n  }\n\n  return (\n    <PolarisRangeSlider\n      id={name}\n      error={error}\n      disabled={isSubmitting}\n      {...polarisProps}\n      value={value}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onChange={handleChange}\n    />\n  );\n}\n\nexport default RangeSlider;\n","import React from 'react';\nimport {\n  Select as PolarisSelect,\n  SelectProps as PolarisSelectProps,\n} from '@shopify/polaris';\nimport { Omit, OmittedPolarisProps } from './types';\nimport { UsePolarisFieldProps, usePolarisField } from './usePolarisField';\n\ntype Props<V> = UsePolarisFieldProps<V, string | undefined> &\n  PolarisSelectProps;\n\nexport type SelectProps<V> = Omit<Props<V>, OmittedPolarisProps>;\n\nfunction SelectField<V = any>(props: SelectProps<V>) {\n  const { name, encode, decode, validate, ...polarisProps } = props;\n\n  const {\n    value,\n    isSubmitting,\n    handleFocus,\n    handleBlur,\n    handleChange,\n    error,\n  } = usePolarisField<V, string | undefined>({\n    name,\n    encode,\n    decode,\n    validate,\n  });\n\n  if (typeof value !== 'string' && value !== undefined) {\n    throw new Error(\n      `[Select] Found value of type \"${typeof value}\" for field \"${name}\". Requires string (after decode)`,\n    );\n  }\n\n  return (\n    <PolarisSelect\n      id={name}\n      error={error}\n      disabled={isSubmitting}\n      {...polarisProps}\n      value={value as string | undefined}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onChange={handleChange}\n    />\n  );\n}\n\nexport default SelectField;\n","import React from 'react';\nimport {\n  TextField as PolarisTextField,\n  TextFieldProps as PolarisTextFieldProps,\n} from '@shopify/polaris';\nimport { usePolarisField, UsePolarisFieldProps } from './usePolarisField';\nimport { Omit, OmittedPolarisProps } from './types';\n\ntype Props<V> = UsePolarisFieldProps<V, string> & PolarisTextFieldProps;\n\nexport type TextFieldProps<V = any> = Omit<Props<V>, OmittedPolarisProps>;\n\nfunction TextField<V = any>(props: TextFieldProps<V>) {\n  const { name, encode, decode, validate, ...polarisProps } = props;\n\n  const {\n    value: rawValue,\n    isSubmitting,\n    handleFocus,\n    handleBlur,\n    handleChange,\n    error,\n  } = usePolarisField<V, string>({ name, encode, decode, validate });\n\n  const value = rawValue === undefined ? '' : rawValue;\n  if (typeof value !== 'string') {\n    throw new Error(\n      `[TextField] Found value of type \"${typeof value}\" for field \"${name}\". Requires string (after decode)`,\n    );\n  }\n\n  return (\n    <PolarisTextField\n      id={name}\n      error={error}\n      disabled={isSubmitting}\n      {...polarisProps}\n      value={value}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onChange={handleChange}\n    />\n  );\n}\n\nexport default TextField;\n"],"names":["usePolarisField","props","name","encode","decode","validate","useFormikContext","registerField","unregisterField","getFieldProps","getFieldMeta","isSubmitting","setFieldError","setFieldValue","useEffect","field","meta","value","useMemo","handleFocus","useCallback","handleBlur","onBlur","target","handleChange","v","error","touched","polarisProps","rawValue","undefined","Error","React","PolarisCheckbox","id","disabled","checked","onFocus","onChange","Array","isArray","PolarisRangeSlider","PolarisSelect","PolarisTextField"],"mappings":"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"}